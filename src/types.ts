/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  '/user': {
    get: operations['getCurrentUser'];
    put: operations['updateCurrentUser'];
    patch: operations['patchCurrentUser'];
  };
  '/purchasable/{id}': {
    get: operations['getById_1'];
    put: operations['update'];
    delete: operations['delete'];
  };
  '/game/{id}': {
    get: operations['getById_3'];
    put: operations['update_1'];
    delete: operations['deleteGame'];
  };
  '/game/{id}/api-key': {
    put: operations['createApiKey'];
    delete: operations['revokeApiKey'];
  };
  '/purchasable': {
    get: operations['search'];
    post: operations['create'];
  };
  '/match/{matchId}/replay/{userId}': {
    get: operations['findReplay'];
    post: operations['saveReplay'];
  };
  '/match/{id}/score': {
    post: operations['updateScore'];
  };
  '/match/join': {
    post: operations['joinMatch'];
  };
  '/game': {
    get: operations['search_1'];
    post: operations['create_1'];
  };
  '/checkout/fast': {
    post: operations['fastCheckout'];
  };
  '/basket/items': {
    post: operations['addItemToBasket'];
    patch: operations['updateItemInBasket'];
  };
  '/wallet': {
    get: operations['getUserWallet'];
  };
  '/user/{id}': {
    get: operations['getById'];
  };
  '/match/{id}': {
    get: operations['getById_2'];
    delete: operations['deleteById'];
  };
  '/basket': {
    get: operations['getCurrentBasket'];
    delete: operations['deleteCurrentBasket'];
  };
}

export interface components {
  schemas: {
    /**
     * @description System-wide error response object
     * @example [object Object]
     */
    'Error Response': {
      /**
       * @description Error status name
       * @enum {string}
       */
      status?:
        | '100 CONTINUE'
        | '101 SWITCHING_PROTOCOLS'
        | '102 PROCESSING'
        | '103 CHECKPOINT'
        | '200 OK'
        | '201 CREATED'
        | '202 ACCEPTED'
        | '203 NON_AUTHORITATIVE_INFORMATION'
        | '204 NO_CONTENT'
        | '205 RESET_CONTENT'
        | '206 PARTIAL_CONTENT'
        | '207 MULTI_STATUS'
        | '208 ALREADY_REPORTED'
        | '226 IM_USED'
        | '300 MULTIPLE_CHOICES'
        | '301 MOVED_PERMANENTLY'
        | '302 FOUND'
        | '302 MOVED_TEMPORARILY'
        | '303 SEE_OTHER'
        | '304 NOT_MODIFIED'
        | '305 USE_PROXY'
        | '307 TEMPORARY_REDIRECT'
        | '308 PERMANENT_REDIRECT'
        | '400 BAD_REQUEST'
        | '401 UNAUTHORIZED'
        | '402 PAYMENT_REQUIRED'
        | '403 FORBIDDEN'
        | '404 NOT_FOUND'
        | '405 METHOD_NOT_ALLOWED'
        | '406 NOT_ACCEPTABLE'
        | '407 PROXY_AUTHENTICATION_REQUIRED'
        | '408 REQUEST_TIMEOUT'
        | '409 CONFLICT'
        | '410 GONE'
        | '411 LENGTH_REQUIRED'
        | '412 PRECONDITION_FAILED'
        | '413 PAYLOAD_TOO_LARGE'
        | '413 REQUEST_ENTITY_TOO_LARGE'
        | '414 URI_TOO_LONG'
        | '414 REQUEST_URI_TOO_LONG'
        | '415 UNSUPPORTED_MEDIA_TYPE'
        | '416 REQUESTED_RANGE_NOT_SATISFIABLE'
        | '417 EXPECTATION_FAILED'
        | '418 I_AM_A_TEAPOT'
        | '419 INSUFFICIENT_SPACE_ON_RESOURCE'
        | '420 METHOD_FAILURE'
        | '421 DESTINATION_LOCKED'
        | '422 UNPROCESSABLE_ENTITY'
        | '423 LOCKED'
        | '424 FAILED_DEPENDENCY'
        | '425 TOO_EARLY'
        | '426 UPGRADE_REQUIRED'
        | '428 PRECONDITION_REQUIRED'
        | '429 TOO_MANY_REQUESTS'
        | '431 REQUEST_HEADER_FIELDS_TOO_LARGE'
        | '451 UNAVAILABLE_FOR_LEGAL_REASONS'
        | '500 INTERNAL_SERVER_ERROR'
        | '501 NOT_IMPLEMENTED'
        | '502 BAD_GATEWAY'
        | '503 SERVICE_UNAVAILABLE'
        | '504 GATEWAY_TIMEOUT'
        | '505 HTTP_VERSION_NOT_SUPPORTED'
        | '506 VARIANT_ALSO_NEGOTIATES'
        | '507 INSUFFICIENT_STORAGE'
        | '508 LOOP_DETECTED'
        | '509 BANDWIDTH_LIMIT_EXCEEDED'
        | '510 NOT_EXTENDED'
        | '511 NETWORK_AUTHENTICATION_REQUIRED';
      /**
       * Format: int32
       * @description Internal status code
       */
      statusCode?: number;
      /** @description Error reason */
      error?: { [key: string]: unknown } | null;
    };
    UpdateUserRequest: {
      firstName?: string;
      lastName?: string;
      avatarUrl?: string;
    };
    UserResponse: {
      id?: string;
      firstName?: string;
      lastName?: string;
      avatarUrl?: string;
    };
    UpdatePurchasableRequest: {
      title?: string;
      description?: string;
      iconUrl?: string;
      bannerUrl?: string;
      type?: string;
      /** Format: int32 */
      oldPrice?: number;
      /** Format: int32 */
      price?: number;
      /** Format: int32 */
      bonus?: number;
      /** Format: int32 */
      amount?: number;
      properties?: { [key: string]: string };
      tags?: string[];
    };
    PurchasableResponse: {
      id?: string;
      title?: string;
      description?: string;
      iconUrl?: string;
      bannerUrl?: string;
      type?: string;
      /** Format: int32 */
      oldPrice?: number;
      /** Format: int32 */
      price?: number;
      /** Format: int32 */
      bonus?: number;
      /** Format: int32 */
      amount?: number;
      properties?: { [key: string]: string };
      tags?: string[];
      /** Format: date-time */
      createdAt?: string;
      /** Format: date-time */
      updatedAt?: string;
    };
    UpdateGameRequest: {
      title?: string;
      subtitle?: string;
      icon?: string;
      banner?: string;
      description?: string;
      tutorialVideo?: string;
      genre?: string;
      matchTiers?: string[];
      gameUrl?: string;
    };
    GameResponse: {
      id?: string;
      title?: string;
      subtitle?: string;
      iconUrl?: string;
      bannerUrl?: string;
      description?: string;
      tutorialVideoUrl?: string;
      genre?: string;
      gameUrl?: string;
      matchTiers?: string[];
      ownerId?: string;
      /** Format: date-time */
      createdAt?: string;
      /** Format: date-time */
      updatedAt?: string;
      /** Format: int64 */
      version?: number;
      /** Format: int32 */
      popularity?: number;
      tags?: string[];
    };
    ApiKeyResponse: {
      ownerId?: string;
      gameId?: string;
      value?: string;
      revoked?: boolean;
    };
    CreatePurchasableRequest: {
      title?: string;
      description?: string;
      iconUrl?: string;
      bannerUrl?: string;
      type?: string;
      /** Format: int32 */
      oldPrice?: number;
      /** Format: int32 */
      price?: number;
      /** Format: int32 */
      bonus?: number;
      /** Format: int32 */
      amount?: number;
      properties?: { [key: string]: string };
      tags?: string[];
    };
    /** @description Writes a replay to the storage for a given match and player in that match. Replays can be written only once before a match is finished for a given player. This is indicated by submitted a final score for the player. */
    SaveReplayRequest: {
      /** @description Should be a base64 encoded string for binary data, an escaped json string, or a csv string. This data can be retrieved later in matches for replays that are completed or bot replays that were assigned to a match. The payload can also be metadata containing an ID/URL/Redirect that creates a foreign key relationship for a replay storage that is used by the game. Payloads can not be larger than ~16MB. If that is exceeded, an internal error will occur. */
      payload: string;
    };
    UpdateScoreRequest: {
      /** Format: int32 */
      score: number;
      playerToken: string;
      final?: boolean;
    };
    JoinMatchRequest: {
      playerToken: string;
    };
    AvailableReplayResponse: {
      matchId?: string;
      userId?: string;
    };
    CurrencyResponse: {
      fullQualifiedName?: string;
      amount?: number;
    };
    MatchResponse: {
      id?: string;
      playerTokens?: string[];
      matchState?: string;
      matchingState?: string;
      participants?: string[];
      result?: components['schemas']['MatchResultResponse'];
      matchTier?: string;
      denominationTier?: string;
      possibleWins?: components['schemas']['CurrencyResponse'][];
      entryCosts?: components['schemas']['CurrencyResponse'][];
      gameId?: string;
      /** Format: date-time */
      timeoutAt?: string;
      /** Format: date-time */
      deletedAt?: string;
      /** Format: date-time */
      finishedAt?: string;
      scoreSnapshots?: components['schemas']['ScoreSnapshotResponse'][];
      seed?: string;
      availableReplays?: components['schemas']['AvailableReplayResponse'][];
    };
    MatchResultResponse: {
      winners?: components['schemas']['ParticipantResultResponse'][];
      losers?: components['schemas']['ParticipantResultResponse'][];
    };
    ParticipantResultResponse: {
      userId?: string;
      /** Format: int32 */
      score?: number;
      displayName?: string;
      avatarUrl?: string;
    };
    ScoreSnapshotResponse: {
      userId?: string;
      /** Format: int32 */
      score?: number;
      /** Format: date-time */
      timestamp?: string;
      finalSnapshot?: boolean;
    };
    CreateGameRequest: {
      title?: string;
      subtitle?: string;
      icon?: string;
      banner?: string;
      description?: string;
      tutorialVideo?: string;
      genre?: string;
      matchTiers?: string[];
      gameUrl?: string;
    };
    FastCheckoutRequest: {
      purchasableId: string;
    };
    CheckoutItemResponse: {
      purchasableId?: string;
      /** Format: int32 */
      amount?: number;
    };
    CheckoutResponse: {
      items?: components['schemas']['CheckoutItemResponse'][];
      status?: string;
    };
    AddItemRequest: {
      purchasableId?: string;
      /** Format: int32 */
      amount?: number;
    };
    BasketItemResponse: {
      purchasableId?: string;
      /** Format: int32 */
      amount?: number;
    };
    BasketResponse: {
      userId?: string;
      items?: components['schemas']['BasketItemResponse'][];
    };
    PatchUserRequest: {
      firstName?: string;
      lastName?: string;
      avatarUrl?: string;
    };
    UpdateItemRequest: {
      purchasableId?: string;
      /** Format: int32 */
      amount?: number;
    };
    /** @description Wallet currencies */
    'Currency Entry': {
      /** @description Id of currency in wallet */
      identifier: string;
      /**
       * Format: int64
       * @description Amount of given currency in wallet
       */
      amount?: number;
    };
    /** @description Wallet holds all belongings of a user. It contains purchasables and currencies. */
    Wallet: {
      /** @description Wallet owner */
      userId: string;
      /** @description Wallet entries */
      entries: components['schemas']['Wallet Entry'][];
      /** @description Wallet currencies */
      currencies: components['schemas']['Currency Entry'][];
    };
    /** @description Wallet entries */
    'Wallet Entry': {
      /** @description Id of purchasables in wallet */
      purchasableId: string;
      /**
       * Format: int32
       * @description Amount of given purchasable in wallet
       */
      amount?: number;
    };
    Predicate: { [key: string]: unknown };
    Pageable: {
      /** Format: int32 */
      page?: number;
      /** Format: int32 */
      size?: number;
      sort?: string[];
    };
    PagePurchasableResponse: {
      /** Format: int64 */
      totalElements?: number;
      /** Format: int32 */
      totalPages?: number;
      first?: boolean;
      last?: boolean;
      sort?: components['schemas']['Sort'];
      /** Format: int32 */
      number?: number;
      /** Format: int32 */
      numberOfElements?: number;
      pageable?: components['schemas']['PageableObject'];
      /** Format: int32 */
      size?: number;
      content?: components['schemas']['PurchasableResponse'][];
      empty?: boolean;
    };
    PageableObject: {
      sort?: components['schemas']['Sort'];
      paged?: boolean;
      unpaged?: boolean;
      /** Format: int32 */
      pageNumber?: number;
      /** Format: int32 */
      pageSize?: number;
      /** Format: int64 */
      offset?: number;
    };
    Sort: {
      sorted?: boolean;
      unsorted?: boolean;
      empty?: boolean;
    };
    Purchasable: {
      id?: string;
      title?: string;
      description?: string;
      iconUrl?: string;
      bannerUrl?: string;
      /** @enum {string} */
      type?: 'Coin' | 'GameTicket' | 'Item';
      /** Format: int32 */
      oldPrice?: number;
      /** Format: int32 */
      price?: number;
      /** Format: int32 */
      bonus?: number;
      /** Format: int32 */
      amount?: number;
      properties?: { [key: string]: string };
      tags?: string[];
      /** Format: date-time */
      createdAt?: string;
      /** Format: date-time */
      updatedAt?: string;
    };
    /** @description A finished replay that was found. */
    FindReplayResponse: {
      /** @description This is the payload of the replay in the format defined by the game. */
      payload: string;
      /**
       * Format: date-time
       * @description The server time in UTC when the replay was saved.
       */
      createdAt: string;
    };
    PageGameResponse: {
      /** Format: int64 */
      totalElements?: number;
      /** Format: int32 */
      totalPages?: number;
      first?: boolean;
      last?: boolean;
      sort?: components['schemas']['Sort'];
      /** Format: int32 */
      number?: number;
      /** Format: int32 */
      numberOfElements?: number;
      pageable?: components['schemas']['PageableObject'];
      /** Format: int32 */
      size?: number;
      content?: components['schemas']['GameResponse'][];
      empty?: boolean;
    };
  };
}

export interface operations {
  getCurrentUser: {
    responses: {
      /** OK */
      200: {
        content: {
          'application/json': components['schemas']['UserResponse'];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['Error Response'];
        };
      };
    };
  };
  updateCurrentUser: {
    responses: {
      /** OK */
      200: {
        content: {
          'application/json': components['schemas']['UserResponse'];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['Error Response'];
        };
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdateUserRequest'];
      };
    };
  };
  patchCurrentUser: {
    responses: {
      /** OK */
      200: {
        content: {
          'application/json': components['schemas']['UserResponse'];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['Error Response'];
        };
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['PatchUserRequest'];
      };
    };
  };
  getById_1: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          'application/json': components['schemas']['Purchasable'];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['Error Response'];
        };
      };
    };
  };
  update: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          'application/json': components['schemas']['PurchasableResponse'];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['Error Response'];
        };
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdatePurchasableRequest'];
      };
    };
  };
  delete: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** Accepted */
      202: unknown;
      /** Unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['Error Response'];
        };
      };
    };
  };
  getById_3: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          'application/json': components['schemas']['GameResponse'];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['Error Response'];
        };
      };
    };
  };
  update_1: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          'application/json': components['schemas']['GameResponse'];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['Error Response'];
        };
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdateGameRequest'];
      };
    };
  };
  deleteGame: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** Accepted */
      202: unknown;
      /** Unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['Error Response'];
        };
      };
    };
  };
  createApiKey: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** Created */
      201: {
        content: {
          'application/json': components['schemas']['ApiKeyResponse'];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['Error Response'];
        };
      };
    };
  };
  revokeApiKey: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** Accepted */
      202: {
        content: {
          'application/json': components['schemas']['ApiKeyResponse'];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['Error Response'];
        };
      };
    };
  };
  search: {
    parameters: {
      query: {
        predicate: components['schemas']['Predicate'];
        pageable: components['schemas']['Pageable'];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          'application/json': components['schemas']['PagePurchasableResponse'];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['Error Response'];
        };
      };
    };
  };
  create: {
    responses: {
      /** Created */
      201: {
        content: {
          'application/json': components['schemas']['PurchasableResponse'];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['Error Response'];
        };
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['CreatePurchasableRequest'];
      };
    };
  };
  findReplay: {
    parameters: {
      header: {
        'X-Api-Key': string;
      };
      path: {
        matchId: string;
        userId: string;
      };
    };
    responses: {
      /** The finished replay was found */
      200: {
        content: {
          'application/json': components['schemas']['FindReplayResponse'];
        };
      };
      /** When the match is not found or the userId is not part of the match. */
      400: {
        content: {
          'application/json': components['schemas']['Error Response'];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['Error Response'];
        };
      };
      /** When the replay can not be found even though the match is finished. */
      404: {
        content: {
          'application/json': components['schemas']['Error Response'];
        };
      };
      /** When the player has not yet submitted a final score for the match where the replay stored for. */
      409: {
        content: {
          'application/json': components['schemas']['Error Response'];
        };
      };
    };
  };
  saveReplay: {
    parameters: {
      header: {
        'X-Api-Key': string;
      };
      path: {
        matchId: string;
        userId: string;
      };
    };
    responses: {
      /** The replay was saved successfully */
      201: unknown;
      /** Validation failed, e.g. payload is empty */
      400: {
        content: {
          'application/json': components['schemas']['Error Response'];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['Error Response'];
        };
      };
      /** If a replay already exists for this match+user, the match was not found, the match is already finished for the user or the userId is not part of the match. */
      409: {
        content: {
          'application/json': components['schemas']['Error Response'];
        };
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['SaveReplayRequest'];
      };
    };
  };
  updateScore: {
    parameters: {
      path: {
        id: string;
      };
      header: {
        'X-Api-Key': string;
      };
    };
    responses: {
      /** Created */
      201: unknown;
      /** Unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['Error Response'];
        };
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdateScoreRequest'];
      };
    };
  };
  joinMatch: {
    parameters: {
      header: {
        'X-Api-Key': string;
      };
    };
    responses: {
      /** Accepted */
      202: {
        content: {
          'application/json': components['schemas']['MatchResponse'];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['Error Response'];
        };
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['JoinMatchRequest'];
      };
    };
  };
  search_1: {
    parameters: {
      query: {
        predicate?: components['schemas']['Predicate'];
        pageable?: components['schemas']['Pageable'];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          'application/json': components['schemas']['PageGameResponse'];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['Error Response'];
        };
      };
    };
  };
  create_1: {
    responses: {
      /** OK */
      200: {
        content: {
          'application/json': components['schemas']['GameResponse'];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['Error Response'];
        };
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateGameRequest'];
      };
    };
  };
  fastCheckout: {
    responses: {
      /** Accepted */
      202: {
        content: {
          'application/json': components['schemas']['CheckoutResponse'];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['Error Response'];
        };
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['FastCheckoutRequest'];
      };
    };
  };
  addItemToBasket: {
    responses: {
      /** OK */
      200: {
        content: {
          'application/json': components['schemas']['BasketResponse'];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['Error Response'];
        };
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['AddItemRequest'];
      };
    };
  };
  updateItemInBasket: {
    responses: {
      /** OK */
      200: {
        content: {
          'application/json': components['schemas']['BasketResponse'];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['Error Response'];
        };
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdateItemRequest'];
      };
    };
  };
  getUserWallet: {
    responses: {
      /** The current user's wallet */
      200: {
        content: {
          'application/json': components['schemas']['Wallet'];
        };
      };
      /** UserId missing */
      400: {
        content: {
          'application/json': components['schemas']['Error Response'];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['Error Response'];
        };
      };
      /** Could not get user's wallet */
      409: {
        content: {
          'application/json': components['schemas']['Error Response'];
        };
      };
    };
  };
  getById: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          'application/json': components['schemas']['UserResponse'];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['Error Response'];
        };
      };
    };
  };
  getById_2: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          'application/json': components['schemas']['MatchResponse'];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['Error Response'];
        };
      };
    };
  };
  deleteById: {
    parameters: {
      path: {
        id: string;
      };
      header: {
        'X-Api-Key': string;
      };
    };
    responses: {
      /** Accepted */
      202: unknown;
      /** Unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['Error Response'];
        };
      };
    };
  };
  getCurrentBasket: {
    responses: {
      /** OK */
      200: {
        content: {
          'application/json': components['schemas']['BasketResponse'];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['Error Response'];
        };
      };
    };
  };
  deleteCurrentBasket: {
    responses: {
      /** OK */
      200: unknown;
      /** Unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['Error Response'];
        };
      };
    };
  };
}

export interface external {}
